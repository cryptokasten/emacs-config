#+TITLE: Emacs Config
#+INFOJS_OPT: view:t toc:t ltoc:t mouse:underline buttons:0 path:https://www.linux.org.ru/tango/combined.css
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>
#+PROPERTY: header-args :tangle yes

* Package manager settings

#+begin_src emacs-lisp :tangle yes
(require 'package)
(setq package-archives
      `(,@package-archives
        ("melpa" . "https://melpa.org/packages/")
        ("org" . "https://orgmode.org/elpa/")
        ))

(unless package--initialized (package-initialize t))

(setq package-enable-at-startup nil)

(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(put 'use-package 'lisp-indent-function 1)
(setq use-package-always-ensure t)

(use-package system-packages
  :custom
  (system-packages-noconfirm t))

(use-package use-package-ensure-system-package)

;; :diminish keyword
(use-package diminish)

;; :bind keyword
(use-package bind-key)

;; :quelpa keyword
(use-package quelpa)
(use-package quelpa-use-package)

(use-package paradox
  :config
  (paradox-enable))
#+end_src

* Themes and appearance
** Themes settings

#+BEGIN_SRC emacs-lisp
(use-package spacemacs-theme
  :defer t
  :init
    (load-theme 'spacemacs-light t)
)
#+END_SRC

** Fonts

#+BEGIN_SRC emacs-lisp
(use-package faces
  :ensure nil
  :defer t
  :custom
  (face-font-family-alternatives '(("Consolas" "Monaco" "Monospace")))
  :config
  (set-face-attribute 'default
                      nil
                      :family (caar face-font-family-alternatives)
                      :weight 'regular
                      :width 'semi-condensed
                      ;; (/ (* 19 (display-pixel-height)) (display-mm-height))
                      :height (if (> (display-pixel-height) 1000) 240 120))
  (set-fontset-font "fontset-default" 'cyrillic
                    (font-spec :registry "iso10646-1" :script 'cyrillic)))
#+END_SRC

** GUI
*** Hide excess UI elements

    #+BEGIN_SRC emacs-lisp
     (use-package tool-bar
       :ensure nil
       :config
       (tool-bar-mode -1)
       :bind
       ([s-f9] . tool-bar-mode))

     (use-package scroll-bar
       :ensure nil
       :config
       (scroll-bar-mode -1))

     (use-package menu-bar
       :ensure nil
       :config
       (menu-bar-mode -1)
       :bind
       ([s-f10] . menu-bar-mode))
    #+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
(use-package mood-line
:config
(mood-line-mode)
)
#+END_SRC

* Main settings
** Emacs

#+BEGIN_SRC emacs-lisp
  (use-package emacs
    :ensure nil
    :custom
    (delete-by-moving-to-trash t)
    (trash-directory "~/Trash")
    (global-set-key (kbd "C-x k") 'kill-this-buffer)
  )

(setq frame-title-format
          '(buffer-file-name "%f"
            (dired-directory dired-directory "%b")))
#+END_SRC

** Custom

#+BEGIN_EXAMPLE emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)
#+END_EXAMPLE

** Reverse IM

#+BEGIN_SRC emacs-lisp
  (use-package reverse-im
    :config
    (reverse-im-activate "russian-computer")
  )
#+END_SRC

** Search

#+BEGIN_SRC emacs-lisp
(use-package smex)

(use-package ivy
  :diminish ivy-mode
  :config
    (ivy-mode t)
)

(use-package counsel
  :bind
  (([remap isearch-forward] . counsel-grep-or-swiper))
  (([remap execute-extended-command] . counsel-M-x))
)

(use-package swiper)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ag)
#+END_SRC

** Dired

#+BEGIN_SRC emacs-lisp
    (use-package dired
      :ensure nil
      :custom (dired-dwim-target t "guess a target directory")
      :hook
      (dired-mode . dired-hide-details-mode))

;; (use-package dired-async-mode)
#+END_SRC

** Quick jumps

#+BEGIN_SRC emacs-lisp
    (use-package avy
      :config
      (avy-setup-default)
      :bind
      (("C-:" . avy-goto-char)
       ;; ("C-'" . avy-goto-char-2)
       ("M-g M-g" . avy-goto-line)
       ("M-s M-s" . avy-goto-word-1)))

    (use-package avy-zap
      :bind
      ([remap zap-to-char] . avy-zap-to-char))

    (use-package ace-jump-buffer
      :bind
      (("M-g b" . ace-jump-buffer)))

    (use-package ace-window
      :custom
      (aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l) "Use home row for selecting.")
      (aw-scope 'frame "Highlight only current frame.")
      :bind
      (("M-o" . ace-window)))

    (use-package link-hint
      :bind
      (("<XF86Search>" . link-hint-open-link)
       ("S-<XF86Search>" . link-hint-copy-link)
       :map mode-specific-map
       :prefix-map link-hint-keymap
       :prefix "l"
       ("o" . link-hint-open-link)
       ("c" . link-hint-copy-link)))

    (use-package ace-link
      :after link-hint ; to use prefix keymap
      :bind
      (:map link-hint-keymap
            ("l" . counsel-ace-link))
      :config
      (ace-link-setup-default))


#+END_SRC

** Dashboard

#+BEGIN_SRC emacs-lisp
(use-package dashboard)
#+END_SRC

** Help

#+BEGIN_SRC emacs-lisp
    (use-package which-key
      :diminish which-key-mode
      :config
      (which-key-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package man)
#+END_SRC

* Org-mode
** Org-babel
*** Languages

#+BEGIN_SRC emacs-lisp
(use-package ob-ipython)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package ob-go)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '(
   (latex . t)
   (python . t)
   (ipython . t)
   (plantuml . t)
   (dot . t)
   (js . t)
   (go . t)
   (shell . t)))
#+END_SRC

*** Plantuml

#+BEGIN_SRC emacs-lisp
(setq org-plantuml-jar-path
      (expand-file-name "~/soft/plantuml.jar"))
#+END_SRC

** Exports

#+BEGIN_SRC emacs-lisp
(require 'ox-md)
#+END_SRC

* Programming
** Projects

#+BEGIN_SRC emacs-lisp
     (use-package magit
       :custom
       (magit-completing-read-function 'ivy-completing-read "Force Ivy usage.")
       :bind
       (:map mode-specific-map
             :prefix-map magit-prefix-map
             :prefix "m"
             (("a" . magit-stage-file) ; the closest analog to git add
              ("b" . magit-blame)
              ("B" . magit-branch)
              ("c" . magit-checkout)
              ("C" . magit-commit)
              ("d" . magit-diff)
              ("D" . magit-discard)
              ("f" . magit-fetch)
              ("g" . vc-git-grep)
              ("G" . magit-gitignore)
              ("i" . magit-init)
              ("l" . magit-log)
              ("m" . magit)
              ("M" . magit-merge)
              ("n" . magit-notes-edit)
              ("p" . magit-pull)
              ("P" . magit-push)
              ("r" . magit-reset)
              ("R" . magit-rebase)
              ("s" . magit-status)
              ("S" . magit-stash)
              ("t" . magit-tag)
              ("T" . magit-tag-delete)
              ("u" . magit-unstage)
              ("U" . magit-update-index))))

#+END_SRC

#+BEGIN_SRC emacs-lisp
     (use-package projectile
       :bind
       (:map mode-specific-map ("p" . projectile-command-map))
       :custom
       (projectile-project-root-files-functions
        '(projectile-root-local
          projectile-root-top-down
          projectile-root-bottom-up
          projectile-root-top-down-recurring))
       (projectile-completion-system 'ivy))

     (use-package counsel-projectile
       :after counsel projectile
       :config
       (counsel-projectile-mode))

(setq projectile-mode-line "Projectile")
#+END_SRC

** Autocompletion

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :diminish company-mode
       :hook
       (after-init . global-company-mode))

     (use-package company-quickhelp
       :custom
       (company-quickhelp-delay 3)
       :config
       (company-quickhelp-mode 1))

     (use-package company-shell
       :config
       (add-to-list 'company-backends 'company-shell))
   #+END_SRC

** Yasnippet

#+BEGIN_SRC emacs-lisp
(use-package yasnippet
:config
(yas-global-mode 1)
)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(use-package yasnippet-snippets)
#+END_SRC

** HTTP

    #+BEGIN_SRC emacs-lisp
      (use-package restclient)

      (use-package ob-restclient)

      (use-package company-restclient
        :after (company restclient)
        :config
        (add-to-list 'company-backends 'company-restclient))

    #+END_SRC

** Python

#+BEGIN_SRC emacs-lisp
  (use-package pyvenv
    :hook
    (python-mode . (lambda ()
		     (pyvenv-activate "/opt/anaconda3")))
  )

  (use-package elpy
    :config
    (elpy-enable)
  )

#+END_SRC

** Jupyter notebooks

#+BEGIN_SRC emacs-lisp
(use-package ein)
#+END_SRC

** Go

#+BEGIN_SRC emacs-lisp
(use-package go-mode)
#+END_SRC

** Yaml

#+BEGIN_SRC emacs-lisp
(use-package yaml-mode
)
#+END_SRC

** Jinja2

#+BEGIN_SRC emacs-lisp
(use-package jinja2-mode)
#+END_SRC

** Jira
*** Wiki export

#+BEGIN_SRC emacs-lisp
(use-package ox-jira)
#+END_SRC

* Tools
** EPUB

#+BEGIN_SRC emacs-lisp
(use-package nov)
#+END_SRC

** Time management
*** Pomodoro

 #+BEGIN_SRC emacs-lisp
 (use-package pomodoro
   :config
   (pomodoro-add-to-mode-line)
   :bind
     (:map mode-specific-map
      :prefix-map pomodoro-prefix-map
      :prefix "t"
	(("i" . pomodoro-start)
         ("o" . pomodoro-stop))
     )
 )
 #+END_SRC

** Web browsing

 #+BEGIN_SRC emacs-lisp
 (use-package url-vars
 :ensure nil
 :custom (url-privacy-level 'paranoid)
 )
 #+END_SRC

** Password generator

#+BEGIN_SRC emacs-lisp
(use-package password-generator)
#+END_SRC

** Folding

#+BEGIN_SRC emacs-lisp
(use-package outshine
;;:hook
;;  (prog-mode . outline-minor-mode)
:config
  (add-hook 'outline-minor-mode-hook 'outshine-hook-function)
)
#+END_SRC

** PCAP analyser

#+BEGIN_SRC emacs-lisp
(use-package pcap-mode)
#+END_SRC

** Darkroom

#+BEGIN_SRC emacs-lisp
(use-package darkroom)
#+END_SRC

** Google Translate

#+BEGIN_SRC emacs-lisp
(use-package google-translate)
#+END_SRC

** jabber

#+BEGIN_SRC emacs-lisp
(use-package jabber)

(use-package jabber-otr)
#+END_SRC

